/*
 * Copyright 2014 Real Logic Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

defaultTasks 'clean', 'build'

group = 'uk.co.real-logic'

allprojects {
    apply plugin: 'eclipse'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'

    // Make sure that we use the correct JDK in Eclipse
    // Need to create a JDK8 in eclipse with the name JDK1.8
    plugins.withType(org.gradle.api.plugins.JavaBasePlugin) {
        eclipse.classpath.file.whenMerged { org.gradle.plugins.ide.eclipse.model.Classpath path ->
            path.entries.findAll { it.path.contains('JRE_CONTAINER') }.each {
                it.path += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JDK1.8"
            }
        }
    }

    group = 'uk.co.real-logic'

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile 'org.hamcrest:hamcrest-all:1.3', 'junit:junit:4.11', 'org.mockito:mockito-all:1.9.5'
    }

    version = '0.1-SNAPSHOT'

    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
    }

    test {
        testLogging {
            events 'passed', 'skipped', 'failed'
            showStandardStreams = true
            exceptionFormat = 'full'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                }
            }
        }
    }

    javadoc {
        title = '<h1>Aeron Transport Protocol</h1>'

        options.bottom = '<i>Copyright &#169; 2014 Real Logic Ltd. All Rights Reserved.</i>'
        options.addStringOption('XDignore.symbol.file', '-quiet')
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    configurations {
        tests
    }

    artifacts {
        archives sourcesJar, javadocJar
        tests testJar
    }
}

project(':aeron-mediadriver') {
    apply plugin: 'application'

    mainClassName = 'uk.co.real_logic.aeron.mediadriver.MediaDriver'

    dependencies {
        compile project(':aeron-util')
        testCompile project(path: ':aeron-util', configuration: 'tests')
    }

    build.doLast {
        tasks.startScripts.execute()
        tasks.installApp.execute()
        tasks.distZip.execute()
    }
}

project(':aeron-core') {
    dependencies {
        compile project(':aeron-util')
        testCompile project(path: ':aeron-util', configuration: 'tests')
    }
}

project(':aeron-examples') {
    dependencies {
        compile project(':aeron-core'), project(':aeron-mediadriver')
    }

    task(pub, dependsOn: 'build', type: JavaExec) {
        description 'Runs ExamplePublisher'
        main = 'uk.co.real_logic.aeron.examples.ExamplePublisher'
        classpath = sourceSets.main.runtimeClasspath
    }

    task(sub, dependsOn: 'build', type: JavaExec) {
        description 'Runs ExampleSubscriber'
        main = 'uk.co.real_logic.aeron.examples.ExampleSubscriber'
        classpath = sourceSets.main.runtimeClasspath
    }
}

project(':aeron-benchmark') {
    apply plugin: 'shadow'

    dependencies {
        compile project(':aeron-core'), project(':aeron-mediadriver')
        compile 'org.openjdk.jmh:jmh-core:0.4.2'
    }

    shadow {
        outputFile = new File('aeron-benchmark/build/libs/microbenchmarks.jar')
    }

    jar {
        manifest {
            attributes 'Main-Class': 'org.openjdk.jmh.Main'
        }
    }

    build.doLast {
        tasks.shadowJar.execute()
    }
}

project(':aeron-system-tests') {
    dependencies {
        compile project(':aeron-core'), project(':aeron-mediadriver')
        testCompile project(path: ':aeron-util', configuration: 'tests')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
